#! /usr/bin/env bash

# Install/update script for all my dot files
#
# Author Dimitar Dimitrov <mitkofr@yahoo.fr>
# ------------------------------------------

# Settings {{{1

# Plugin Authors
me=kurkale6ka
godlygeek=godlygeek
spiiph=spiiph
tpope=tpope

blue=$(tput setaf 4)
bold=$(tput bold)
reset=$(tput sgr0)

# matchit, vsearch, bgrep, php, xsd...
# git://github.com/godlygeek/netlib.git
# git://github.com/godlygeek/windowlayout.git

# todo:
# messages/quiet
# repo/working copy?
# $repos/$bashfiles/scripts -> shorten
repos="$HOME"
dotfiles="$HOME"

bashfiles=bashfiles
helpfiles=help
vimfiles=vimfiles

github='github.com'
arg_plugins=(ln -sv)

# Print a message to stderr
warn() { echo "$@" >&2; }

show_help() { # {{{1

    local program="${0##*/}"

    warn "Usage: $program -l|--links"
    warn "       $program --copy-plugins"
    warn "       $program --move-plugins"
    warn "       $program --repos=repos-folder"
    warn "       $program --dotfiles=dotfiles-folder"
    warn "       $program --ip=github's ip"
    warn "       $program -h|--help|-?: this help text"
}

# Parse -|-- options {{{1
parse_option() {

    local option="$1"
    local value="${option#*=}"

    case "$option" in

           *repos*) repos="$value";;
        *dotfiles*) dotfiles="$value";;
              *ip*) github="$value";;
    esac
}

# Go trough all -|-- command line options
while [[ $1 == -* ]]; do

    case "$1" in

                 --*=*) parse_option "$1";    shift;;
            -l|--links) arg_links="$1";       shift;;
        --copy-plugins) arg_plugins=(cp -fv); shift;;
        --move-plugins) arg_plugins=(mv -v);  shift;;
        --omit-plugins) arg_omit=omit;        shift;;
        # -v|--verbose) arg_plugins=(mv);     shift;;
         -h|--help|-\?) show_help;            exit 0;;
                    --) shift; break;;
                    -*) echo "invalid option: $1" 1>&2; show_help; exit 1;;
    esac
done

command -v git >/dev/null 2>&1 && git=true

copyRepo() { # {{{1

    local author="$1"
    local destination="$2"
    local repo="$3"

    [[ ! -d $destination ]] && mkdir -pv "$destination"

    printf "\n%-50s" "${bold}Copying $repo repository$reset..."

    if [[ -d $destination ]]; then

        if wget -qP "$destination" "http://github.com/$author/$repo/tarball/master"; then

            if
                tar -zxf "$destination"/*"$author"*"$repo"*.tar.gz -C "$destination"
                rm "$destination"/*"$author"*"$repo"*.tar.gz
                mv "$destination"/{*"$author"*"$repo"*/,"$repo"}
            then
                printf "... [ ${bold}OK$reset ]\n"
            else
                printf "... [ ${bold}FAILED$reset ]: $? (tar, rm or mv)\n"
            fi
        else
            printf "... [ ${bold}FAILED$reset ]: network failure\n"
        fi
    else
        printf "... [ ${bold}FAILED$reset ]: $destination folder couldn't be created\n"
    fi
}

choice() { # {{{1

    local quit="$1"
    local message="$2"

    if [[ go_on == $quit || ! $secondTime ]]; then

        printf "$message:\n\n"

        select choice in "${@:3}"; do

            # The first choice is for exiting
            if [[ $choice == $3 ]]; then

                if [[ quit == $quit ]]; then

                    exit 0
                else
                    return 1
                fi
            fi
            break
        done
    fi

    [[ go_on != $quit ]] && (( secondTime++ ))
}

cloneRepo() { # {{{1

    local author="$1"
    local repo="$2"
    local destination="$3"

    if [[ $author == $me ]]; then

        local remote_host="git@$github:"
    else
        local remote_host="git://$github/"
    fi

    if [[ $git ]]; then

        printf "\n%-50s" "${bold}Cloning $repo repository$reset..."

        if git clone -q "$remote_host$author/$repo.git" "$destination"; then

            printf "... [ ${bold}OK$reset ]\n"
        else
            printf "... [ ${bold}FAILED$reset: Git error ] - trying to copy instead\n"
            copyRepo "$author" "${destination%/*}" "$repo"
        fi
    else
        choice quit 'Git is not installed on this machine' \
        'I want to install git and retry later' \
        'I want to simply copy the repositories'

        copyRepo "$author" "${destination%/*}" "$repo"
    fi
}

pullRepo() { # {{{1

    local author="$1"
    local repo="$2"
    local destination="$3"

    if [[ $author == $me ]]; then

        local remote_host="git@$github:"
    else
        local remote_host="git://$github/"
    fi

    if [[ -d $destination/.git ]]; then

        if [[ $git ]]; then

            printf "\n%-50s" "${bold}Updating $repo repository$reset..."

            if git pull -q "$remote_host$author/$repo.git" master >/dev/null 2>&1; then

                printf "... [ ${bold}OK$reset ]\n"
            else
                choice go_on "... [ ${bold}FAILED$reset: Git error ]" \
                'Abort' \
                'I want to copy over the existing repository'

                rm -rfv "$destination"
                copyRepo "$author" "${destination%/*}" "$repo"
            fi
        else
            choice quit "Cannot update $repo: Git is not installed" \
            'I want to install git and retry later' \
            'I want to copy over the existing repositories'

            rm -rfv "$destination"
            copyRepo "$author" "${destination%/*}" "$repo"
        fi
    else
        warn "$repo is not a Git working copy"
        warn "overwriting $repo..."

        rm -rfv "$destination"
        copyRepo "$author" "${destination%/*}" "$repo"
    fi
}

linkToRepo() { # {{{1

    local repo="$1"
    local dotfile="$2"

    if [[ ! -e $dotfile ]]; then

        printf "\t"
        ln -sv "$repo/${dotfile##*/}" "${dotfile%/*}"
    else
        [[ -f $dotfile ]] && local file='File'
        [[ -L $dotfile ]] && local file='Link'
        [[ -d $dotfile ]] && local file='Folder'

        if [[ ! -O $dotfile ]]; then

            printf "\n\t$blue$file$reset $dotfile ${blue}not owned by you$reset already exists\n\t"
        else
            printf "\n\t$blue$file$reset $dotfile ${blue}owned by you$reset already exists\n\t"
        fi

        # If it is a folder
        if [[ -d $dotfile ]]; then

            rm -irv "$dotfile"

            if [[ ! -d $dotfile ]]; then

                ln -sv "$repo/${dotfile##*/}" "${dotfile%/*}"
            fi
        else
            ln -isv "$repo/${dotfile##*/}" "${dotfile%/*}"
        fi
    fi
}

updateRepo() { # {{{1

    local author="$1"
    local repo="$2"
    local destination="$3"

    [[ -d $destination ]] && cd "$destination" &&
        pullRepo "$author" "$repo" "$destination"

    if [[ ! -d $destination ]] && cloneRepo "$author" "$repo" "$destination" ||
       [[ -d $destination && $arg_links ]]; then

        # If there are dotfiles to link to
        if [[ $4 ]]; then

            for dotfile in "${@:4}"; do

                linkToRepo "$destination" "$dotfile"
            done
        fi
    fi
}

# Actions {{{1

bash_dotfiles=("$dotfiles/."{profile,bash_login,bash_profile})
bash_dotfiles+=("$dotfiles/."{bashrc,bashrc_after,bash_logout,logout,inputrc})
help_dotfiles=("$dotfiles/."{gitignore,screenrc,curlrc})
vim_dotfiles=("$dotfiles/."{vim,vimrc,gvimrc}) # .vim to be removed ?!

updateRepo "$me" "$bashfiles" "$repos/$bashfiles" "${bash_dotfiles[@]}"
updateRepo "$me" "$helpfiles" "$repos/$helpfiles" "${help_dotfiles[@]}"
updateRepo "$me" "$vimfiles"  "$repos/$vimfiles"  "${vim_dotfiles[@]}"

if [[ ! $arg_omit ]]; then

    updateRepo "$godlygeek" csapprox      "$repos/$vimfiles/plugins/csapprox"
    updateRepo "$godlygeek" tabular       "$repos/$vimfiles/plugins/tabular"
    updateRepo "$spiiph"    vim-space     "$repos/$vimfiles/plugins/vim-space"
    updateRepo "$tpope"     vim-surround  "$repos/$vimfiles/plugins/vim-surround"
    updateRepo "$tpope"     vim-repeat    "$repos/$vimfiles/plugins/vim-repeat"

    if [[ -d $repos/$vimfiles/plugins ]]; then

        for plugin in "$repos/$vimfiles/plugins"/*; do

            while read -r -d $'\0'; do

                if [[ cp == ${arg_plugins[0]} ]]; then

                    reply=${REPLY##*$plugin/}
                    reply=${reply%/*}
                    "${arg_plugins[@]}" -- "$REPLY" "$repos/$vimfiles/$reply"

                else
                    "${arg_plugins[@]}" -- "$REPLY" "$repos/$vimfiles/${REPLY##*$plugin/}"
                fi

            done < <(find "$plugin" \( -name '*.vim' -o -name '*.txt' \) -print0)

        done
    fi
fi

# Create a symlink of this script in ~/bin
if [[ -d $repos/$bashfiles/scripts && ! -L $HOME/bin/${0##*/} ]]; then

    if [[ ! -d $HOME/bin ]]; then

        mkdir -v "$HOME/bin" && ln -s "$repos/$bashfiles/scripts/${0##*/}" "$HOME/bin"
    else
        ln -s "$repos/$bashfiles/scripts/${0##*/}" "$HOME/bin"
    fi
fi

# vim: se fdm=marker fmr&:
