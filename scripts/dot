#! /usr/bin/env bash

# Install/update script for all my dot files
#
# Author Dimitar Dimitrov <mitkofr@yahoo.fr>
# ------------------------------------------

# Settings & globals {{{1

shopt -s extglob

program="${0##*/}"

command -v git >/dev/null 2>&1 && git=true

github='github.com'

# Plugin Authors
me=kurkale6ka
godlygeek=godlygeek
spiiph=spiiph
tpope=tpope

# matchit, vsearch, bgrep, php, xsd...
# git://github.com/godlygeek/netlib.git
# git://github.com/godlygeek/windowlayout.git

# todo:
# messages/quiet
# repo/working copy?
# improve ~/help/.gitignore
repos="$HOME"
dotfiles="$HOME"

bashfiles=bashfiles
helpfiles=help
vimfiles=vimfiles

bash_dotfiles=(.{profile,bash_login,bash_profile})
bash_dotfiles+=(.{bashrc,bashrc_after,bash_logout,logout,inputrc})
help_dotfiles=(.{gitignore,screenrc,curlrc})
vim_dotfiles=(.{vimrc,gvimrc})

red=$(tput setaf 1)
green=$(tput setaf 2)
blue=$(tput setaf 4)
bold=$(tput bold)
reset=$(tput sgr0)

# Print a message to stderr {{{1
warn() { echo "$@" >&2; }

show_help() { # {{{1

    warn "Usage: $program --links"
    warn "       $program --copy-plugins"
    warn "       $program --move-plugins"
    warn "       $program --omit-plugins"
    warn "       $program --verbose"
    warn "       $program --repos=repos-folder"
    warn "       $program --dotfiles=dotfiles-folder"
    warn "       $program --ip=github's ip"
    warn "       $program -h|--help|-?: this help text"
}

# -|-- options {{{1
parse_option() {

    local option="$1"
    local value="${option#*=}"

    case "$option" in

           *repos*) repos="$value";;
        *dotfiles*) dotfiles="$value";;
              *ip*) github="$value";;
    esac
}

arg_plugins=(ln -svf)

# Go trough all -|-- command line options
while [[ $1 == -* ]]; do

    case "$1" in

                 --*=*) parse_option "$1";                        shift ;;
               --links) arg_links="$1";                           shift ;;
        --copy-plugins) arg_plugins=(cp -v --remove-destination); shift ;;
        --move-plugins) arg_plugins=(mv -vf);                     shift ;;
        --omit-plugins) arg_omit=omit;                            shift ;;
           # --verbose) arg_plugins=(  );                         shift ;;
         -h|--help|-\?) show_help;                                exit 0;;
                    --) shift;                                    break ;;
                    -*) warn "invalid option: $1"; show_help;     exit 1;;
    esac
done

copyRepo() { # {{{1

    local author="$1"
    local repo_name="$2"
    local repo="$3"
    local repo_parent="${repo%/*}"

    printf "\n%-50s" "${bold}Copying $repo_name repository$reset..."

    if wget -qP "$repo_parent" \
        "http://github.com/$author/$repo_name/tarball/master"; then

        if
            tar -zxf "$repo_parent"/*"$author"*"$repo_name"*.tar.gz \
                -C "$repo_parent"

            rm "$repo_parent"/*"$author"*"$repo_name"*.tar.gz
            mv "$repo_parent"/{*"$author"*"$repo_name"*/,"$repo_name"}
        then
            printf "... [ $bold${green}OK$reset ]\n"
        else
            warn "... [ $bold${red}FAILED$reset ]: $? (tar, rm or mv)\n"
        fi
    else
        warn "... [ $bold${red}FAILED$reset ]: network failure\n"
    fi
}

choice() { # {{{1

    local quit="$1"
    local message="$2"

    if [[ go_on == $quit || ! $secondTime ]]; then

        printf "$message:\n\n"

        select choice in "${@:3}"; do

            # The first choice is for exiting
            if [[ $choice == $3 ]]; then

                if [[ quit == $quit ]]; then

                    exit 0
                else
                    return 1
                fi
            fi
            break
        done
    fi

    [[ go_on != $quit ]] && (( secondTime++ ))
}

cloneRepo() { # {{{1

    local author="$1"
    local repo_name="$2"
    local repo="$3"

    if [[ $author == $me ]]; then

        local remote_host="git@$github:"
    else
        local remote_host="git://$github/"
    fi

    if [[ $git ]]; then

        printf "\n%-50s" "${bold}Cloning $repo_name repository$reset..."

        if git clone -q "$remote_host$author/$repo_name.git" "$repo" \
            >/dev/null 2>&1; then

            printf "... [ $bold${green}OK$reset ]\n"
        else
            warn "... [ $bold${red}FAILED$reset: Git error ]"\
                " - trying to copy instead\n"

            copyRepo "$author" "$repo_name" "$repo"
        fi
    else
        choice quit 'Git is not installed on this machine' \
        'I want to install git and retry later' \
        'I want to simply copy the repositories'

        copyRepo "$author" "$repo_name" "$repo"
    fi
}

pullRepo() { # {{{1

    local author="$1"
    local repo_name="$2"
    local repo="$3"

    if [[ $author == $me ]]; then

        local remote_host="git@$github:"
    else
        local remote_host="git://$github/"
    fi

    if [[ -d $repo/.git ]]; then

        if [[ $git ]]; then

            printf "\n%-50s" "${bold}Updating $repo_name repository$reset..."

            if git pull -q "$remote_host$author/$repo_name.git" master \
                >/dev/null 2>&1; then

                printf "... [ $bold${green}OK$reset ]\n"
            else
                choice go_on "... [ $bold${red}FAILED$reset: Git error ]" \
                'Abort' \
                'I want to copy over the existing repository'

                rm -rfv "$repo"
                copyRepo "$author" "$repo_name" "$repo"
            fi
        else
            choice quit "Cannot update $repo_name: Git is not installed" \
            'I want to install git and retry later' \
            'I want to copy over the existing repositories'

            rm -rfv "$repo"
            copyRepo "$author" "$repo_name" "$repo"
        fi
    else
        printf "$repo_name is not a Git working copy"
        printf "overwriting $repo_name..."

        rm -rfv "$repo"
        copyRepo "$author" "$repo_name" "$repo"
    fi
}

linkToRepo() { # {{{1

    local repo="$1"
    local dotfile="$2"
    local repo_dotfile="$repo/$dotfile"

    if [[ ! -e $dotfiles/$dotfile ]]; then

        printf "\n\t"; ln -sv "$repo_dotfile" "$dotfiles"
    else
        [[ -f $repo_dotfile ]] && local file='File'
        [[ -L $repo_dotfile ]] && local file='Link'
        [[ -d $repo_dotfile ]] && local file='Folder'

        if [[ ! -O $repo_dotfile ]]; then

            printf "\n\t$blue$file$reset $repo_dotfile ${blue}not owned by you"\
                "$reset already exists\n\t"
        else
            printf "\n\t$blue$file$reset $repo_dotfile ${blue}owned by you"\
                "$reset already exists\n\t"
        fi

        ln -isv "$repo_dotfile" "$dotfiles"
    fi
}

updateRepo() { # {{{1

    local author="$1"
    local repo_name="$2"
    local repo="$3"

    [[ -d $repo ]] && cd "$repo" &&
        pullRepo "$author" "$repo_name" "$repo"

    if [[ ! -d $repo ]] && cloneRepo "$author" "$repo_name" "$repo" ||
       [[ -d $repo && $arg_links ]]; then

        # If there are dotfiles to link to
        if [[ $4 ]]; then

            for dotfile in "${@:4}"; do

                linkToRepo "$repo" "$dotfile"
            done
        fi
    fi
}

# Install/update my repositories {{{1

bash_repo="$repos/$bashfiles"
help_repo="$repos/$helpfiles"
vim_repo="$repos/$vimfiles"

updateRepo "$me" "$bashfiles" "$bash_repo" "${bash_dotfiles[@]}"
updateRepo "$me" "$helpfiles" "$help_repo" "${help_dotfiles[@]}"
updateRepo "$me" "$vimfiles"  "$vim_repo"  "${vim_dotfiles[@]}"

# symlink .vim      -> vimfiles
# copy    .[g]vimrc -> _[g]vimrc
if [[ -d $vim_repo ]]; then

    if [[ ! -L $dotfiles/.vim ]]; then

        printf "\n\t"; ln -sv "$vim_repo" "$dotfiles/.vim"
    fi

    if [[ ${arg_plugins[0]} == @(cp|mv) ]]; then

        printf "\n\t"; cp -fv "$vim_repo/.vimrc" "$dotfiles/_vimrc"
        printf "\n\t"; cp -fv "$vim_repo/.gvimrc" "$dotfiles/_gvimrc"
    fi
else
    warn "Failed to install/update $vimfiles repository"
    warn "$vim_repo wasn't created"
fi

# Install/update Vim plugins {{{1
if [[ ! $arg_omit ]]; then

    vim_plugins="$vim_repo/plugins"

    updateRepo "$godlygeek" csapprox      "$vim_plugins/csapprox"
    updateRepo "$godlygeek" tabular       "$vim_plugins/tabular"
    updateRepo "$spiiph"    vim-space     "$vim_plugins/vim-space"
    updateRepo "$tpope"     vim-surround  "$vim_plugins/vim-surround"
    updateRepo "$tpope"     vim-repeat    "$vim_plugins/vim-repeat"

    if [[ -d $vim_plugins ]]; then

        for plugin in "$vim_plugins"/*; do

            while read -r -d $'\0'; do

                printf "\n\t"
                file="${REPLY#*$plugin/}"
                folder="${file%/*}"
                "${arg_plugins[@]}" -- "$REPLY" "$vim_repo/$folder"

            done < <(find "$plugin" \( -name '*.vim' -o -name '*.txt' \) -print0)

        done
    else
        warn 'Failed to install/update the Vim plugins.'
        warn "$vim_plugins wasn't created"
    fi
fi

# Create a symlink of this script in ~/bin {{{1
if [[ -d $bash_repo/scripts && ! -L $HOME/bin/$program ]]; then

    if [[ ! -d $HOME/bin ]]; then

        mkdir -v "$HOME/bin" && ln -s "$bash_repo/scripts/$program" "$HOME/bin"
    else
        [[ ! -L $HOME/bin/$program ]] &&
            ln -s "$bash_repo/scripts/$program" "$HOME/bin"
    fi
fi

# vim: se fdm=marker fmr&:
