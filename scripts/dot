#! /usr/bin/env bash

# Install/update script for all my dot files
#
# Author Dimitar Dimitrov <mitkofr@yahoo.fr>
# ------------------------------------------

shopt -s extglob

me=kurkale6ka

repos="$HOME/test"
bashfiles="$repos/bashfiles"
helpfiles="$repos/help"
vimfiles="$repos/vimfiles"

dotfiles="$HOME/test2"
bash_dotfiles=("$dotfiles/."{profile,bash_profile,bashrc,bashrc_after,bash_logout,inputrc})
help_dotfiles=("$dotfiles/."{gitignore,screenrc,curlrc})
vim_dotfiles=("$dotfiles/."{vim,vimrc,gvimrc})

# [[ ! -d $HOME/bin ]] && mkdir -p "$HOME/bin"
# ln -s "$bashfiles/scripts/dot"    "$HOME/bin"

copyRepo() { # {{{1

    local repos="$1"
    local me="$2"
    local repo="$3"

    if wget -P "$repos" "http://github.com/$me/$repo/tarball/master"; then

        tar -zxvf "$repos"/*"$me"*"$repo"*.tar.gz -C "$repos"
        rm "$repos"/*"$me"*"$repo"*.tar.gz
        mv "$repos"/{*"$me"*"$repo"*/,"$repo"}
    fi
}

cloneRepo() { # {{{1

    local repo="$1"

    if [[ $git ]] || command -v git >/dev/null 2>&1; then

        git=true

        if git clone "git@github.com:$me/$repo.git" "$repos/$repo"; then

            printf "Cloned $repo repository\n"
        else
            copyRepo "$repos" "$me" "$repo"
        fi
    else
        if [[ ! $first ]]; then

            printf "Git is not installed on this machine:\n\n"
            choice_git='I want to install git and retry later'
            choice_repos='I want to simply copy the repositories'

            select choice in "$choice_git" "$choice_repos"; do

                if [[ $choice == $choice_git ]]; then

                    exit 0
                fi
                break
            done

            (( first++ ))
        fi

        copyRepo "$repos" "$me" "$repo"
    fi
}

pullRepo() { # {{{1

    local repo="$1"

    if [[ $git ]] || command -v git >/dev/null 2>&1; then

        git=true

        if git pull "git@github.com:$me/$repo.git master" "$repos/$repo"; then

            printf "Updated $repo repository\n"
        else
            if [[ ! $firstAbort ]]; then

                printf "Cannot update $repo: Git error:\n\n"
                choice_abort='Abort'
                choice_repos='I want to copy over the existing repositories'

                select choice in "$choice_abort" "$choice_repos"; do

                    if [[ $choice == $choice_abort ]]; then

                        exit 0
                    fi
                    break
                done

                (( firstAbort++ ))
            fi

            rm -rf "$repo"
            copyRepo "$repos" "$me" "$repo"
        fi
    else
        if [[ ! $first ]]; then

            printf "Cannot update $repo: Git is not installed:\n\n"
            choice_git='I want to install git and retry later'
            choice_repos='I want to copy over the existing repositories'

            select choice in "$choice_git" "$choice_repos"; do

                if [[ $choice == $choice_git ]]; then

                    exit 0
                fi
                break
            done

            (( first++ ))
        fi

        rm -rf "$repo"
        copyRepo "$repos" "$me" "$repo"
    fi
}

linkToRepo() { # {{{1

    local repo="$1"
    local dotfiles="$2"
    local dotfile="$3"

    # Delete if not mine
    if [[ -e $dotfile && ! -O $dotfile ]]; then

        [[ -d $dotfile ]] && rm -r "$dotfile" || rm "$dotfile"
    fi

    # Delete if mine but not a link
    if [[ -e $dotfile && ! -L $dotfile ]]; then

        [[ -d $dotfile ]] && rm -r "$dotfile" || rm "$dotfile"
    fi

    # To be improved
    [[ ! -L $dotfile ]] && ln -s "$repo/${dotfile##*/}" "$dotfiles"
}

updateRepo() { # {{{1

    # improve: get option -l independently of where it is
    local option="$1"
    local repo="$2"
    local dotfiles="$3"

    [[ -d $repo ]] && pullRepo "${repo##*/}"

    if [[ ! -d $repo ]] && cloneRepo "${repo##*/}" ||
       [[ -d $repo && $option == @(-l|--links) ]]; then

        for dotfile in "${@:4}"; do

            linkToRepo "$repo" "$dotfiles" "$dotfile"
        done
    fi
}

updateRepo "$1" "$bashfiles" "$dotfiles" "${bash_dotfiles[@]}"
#updateRepo "$1" "$helpfiles" "$dotfiles" "${help_dotfiles[@]}"
#updateRepo "$1" "$vimfiles"  "$dotfiles" "${vim_dotfiles[@]}"

## All plugins: ln or cp if -win
#for p in "$vimfiles/plugins"; do

#done

# vim: se fdm=marker fmr&:
