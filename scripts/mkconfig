#! /usr/bin/env bash

mkrepos() {

   mkdir -p "$HOME"/config
   cd       "$HOME"/config || exit 1

   if [[ ! -d bashfiles ]]
   then
      git clone git@github.com:kurkale6ka/bashfiles.git
      echo
   fi
   if [[ ! -d help ]]
   then
      git clone git@github.com:kurkale6ka/help.git
      echo
   fi
   if [[ ! -d vimfiles ]]
   then
      git clone git@github.com:kurkale6ka/vimfiles.git
      echo 'Initializing submodules: '
      git submodule init && git submodule update
   fi

   cd "$HOME"/config &&
   ctags -R --langmap=vim:+.vimrc,sh:+.bashrc.bash_profile                       \
   --exclude=*~ --exclude=.*~ --exclude=bundle --exclude=colors --exclude=keymap \
   --exclude=pathogen.vim                                                        \
   "$HOME"/config/bashfiles/scripts                                              \
   "$HOME"/config/bashfiles/.bashrc                                              \
   "$HOME"/config/vimfiles                                                       \
   "$HOME"/config/vimfiles/bundle/blanklines                                     \
   "$HOME"/config/vimfiles/bundle/blockinsert                                    \
   "$HOME"/config/vimfiles/bundle/pairs                                          \
   "$HOME"/config/vimfiles/bundle/sequence                                       \
   "$HOME"/config/vimfiles/bundle/swap                                           \
   "$HOME"/config/vimfiles/bundle/vsearch                                        \
   "$HOME"/config/help
   # "$HOME"/config/vimfiles/bundle/desertEx
   # "$HOME"/config/vimfiles/bundle/pgn
}

updaterepos() {

   cd "$HOME"/config || exit 1

   if cd bashfiles
   then
      git pull git@github.com:kurkale6ka/bashfiles.git master
      echo
   fi

   if cd help
   then
      git pull git@github.com:kurkale6ka/help.git master
      echo
   fi

   if cd vimfiles
   then
      git pull git@github.com:kurkale6ka/vimfiles.git master
      echo 'Updating submodules: '
      git submodule update
   fi
}

cprepos() {
   wget --no-check-certificate                               \
      https://github.com/kurkale6ka/bashfiles/tarball/master \
      https://github.com/kurkale6ka/help/tarball/master

   if wget --no-check-certificate \
      https://github.com/kurkale6ka/vimfiles/tarball/master
   then
      wget --no-check-certificate                                     \
         https://github.com/kurkale6ka/vim-blanklines/tarball/master  \
         https://github.com/kurkale6ka/vim-blockinsert/tarball/master \
         https://github.com/kurkale6ka/vim-quotes/tarball/master      \
         https://github.com/kurkale6ka/vim-sequence/tarball/master    \
         https://github.com/kurkale6ka/vim-swap/tarball/master        \
         https://github.com/godlygeek/csapprox/tarball/master         \
         https://github.com/godlygeek/tabular/tarball/master          \
         https://github.com/tpope/vim-pathogen/tarball/master         \
         https://github.com/tpope/vim-abolish/tarball/master          \
         https://github.com/tpope/vim-endwise/tarball/master          \
         https://github.com/tpope/vim-unimpaired/tarball/master       \
         https://github.com/tpope/vim-surround/tarball/master         \
         https://github.com/tpope/vim-repeat/tarball/master           \
         https://github.com/tpope/vim-ragtag/tarball/master           \
         https://github.com/tpope/vim-flatfoot/tarball/master         \
         https://github.com/scrooloose/nerdcommenter/tarball/master   \
         https://github.com/vim-scripts/MarkLines/tarball/master      \
         https://github.com/vim-scripts/bufkill.vim/tarball/master    \
         https://github.com/rodjek/vim-puppet/tarball/master          \
         https://github.com/vim-scripts/UltiSnips/tarball/master
   fi
   local repo
   for repo in master*; do
      # Use tar with -C <dir> ...?
      tar zxvf "$repo" && command rm "$repo"
   done
}

 rcdirs=({bash,vim}files help)
    rcs=(.dir_colors .gitignore .my.cnf .{curl,input,irb,screen,top}rc)
 vimrcs=(.{,g}vimrc)
bashrcs=(.profile .bash_{profile,login,logout} .bashrc .logout)
 bashxs=(colors em mkconfig madd-host mssh)

mklinks() {

   # Same as in ${parameter#word to remove} or ${parameter%word to remove},
   # # <=> \< and % <=> \>, so ${rcdir/#/$HOME/config/} means replace the
   # beginning of rcdir with $HOME/config/
   local rcdir
   for rcdir in "${rcdirs[@]}"
   do ln -sT "${rcdir/#/$HOME/config/}" "${rcdir/#/$HOME/}"
   done

   ln -sT "$HOME"/config/vimfiles "$HOME"/.vim

   if ((! $#)); then
      ln -s "$HOME"/config/vimfiles/bundle/pathogen/autoload/pathogen.vim \
            "$HOME"/config/vimfiles/autoload
   fi

   ln -s "${rcs[@]/#/$HOME/config/help/conf/}" \
      "${vimrcs[@]/#/$HOME/config/vimfiles/}"  \
     "${bashrcs[@]/#/$HOME/config/bashfiles/}" \
     "$HOME"/config/bashfiles/scripts/cd/.cdmarks.skel "$HOME"

   mkdir -p "$HOME"/bin
   if [[ -d $HOME/bin ]]; then
      ln -s "${bashxs[@]/#/$HOME/config/bashfiles/scripts/}" \
            "$HOME"/config/vimfiles/scripts/vc "$HOME"/bin
   fi
}

rmlinks() {
   command \
      rm "$HOME"/{.cdmarks.skel,.vim,config/vimfiles/autoload/pathogen.vim,bin/vc} \
                  "${rcdirs[@]/#/$HOME/}"                                          \
                     "${rcs[@]/#/$HOME/}"                                          \
                  "${vimrcs[@]/#/$HOME/}"                                          \
                 "${bashrcs[@]/#/$HOME/}"                                          \
                  "${bashxs[@]/#/$HOME/bin/}"
}

mkenv() {
   mkrepos

   # Put in @sets ?
   emerge bind-tools     \
          evince         \
          figlet         \
          gcalctool      \
          # dev-vcs/git -gtk
          git            \
          gnupg          \
          moreutils      \
          ntp            \
          # sys-process/parallel \ ?
          sudo           \
          tcpdump        \
          vixie-cron     \
          wgetpaste      \
          x11-misc/xclip
   # rc-update add ntpd vixie-cron default

   # visudo
   # Defaults:mitko timestamp_timeout=50 # min before asking for password again

   mkdir -p "$HOME"/backups
   # crontab -u "$USER" "$HOME"/help/crontab/crontab.backups
}

 options=('Update repositories' 'Create repositories' 'Copy repositories')
options+=('Make links'          'Remove links'        'Machine setup')

select choice in "${options[@]}"
do
   case "$choice" in
      "${options[0]}") updaterepos; break;;
      "${options[1]}") mkrepos;     break;;
      "${options[2]}") cprepos;     break;;
      "${options[3]}") mklinks;     break;;
      "${options[4]}") rmlinks;     break;;
      "${options[5]}") mkenv;       break;;
                    *) echo '*** Wrong choice ***' >&2
   esac
done
